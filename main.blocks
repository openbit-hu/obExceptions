<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="fen%%xs0gRzWI?(.,qZp" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="a%6%vA5}E^S}O(7y{N$d" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace obExceptions {" line1="    let dt: number = 1000" line2="    let res: number = 200" line3="    let t0: number" line4="    let timerCallback: () =&gt; void" line5="    //% blockId=&quot;obTimer_start&quot;" line6="    //% block=&quot;start Timer event || in every $time ms with $resolution ms accuracy&quot;" line7="    export function start(time?: number, resolution?: number) {" line8="        if (time) dt = time" line9="        if (resolution) res = resolution" line10="        if (resolution &gt; dt / 2) resolution = dt / 2" line11="        t0 = control.millis()" line12="        control.inBackground(function () {" line13="            while (true) {" line14="                basic.pause(res)" line15="                let t1 = control.millis()" line16="                if (t1 - t0 &gt; dt) {" line17="                    timerCallback()" line18="                    t0 = t1" line19="                }" line20="            }" line21="        })" line22="    }" line23="    /**" line24="     * Attaches code to run when the timer triggers an event." line25="     * @param body TODO" line26="     */" line27="    //% blockId=&quot;obExceptions_onCatch&quot;" line28="    //% block=&quot;onCatch&quot;" line29="    export function onCatch(body: () =&gt; void): void {" line30="        timerCallback = body" line31="    }" line32="}" numlines="33"></mutation></block></statement></block></xml>